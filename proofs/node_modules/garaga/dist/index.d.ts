declare enum CurveId {
    BN254 = 0,
    BLS12_381 = 1,
    SECP256K1 = 2,
    SECP256R1 = 3,
    ED25519 = 4
}
interface G1Point$1 {
    x: bigint;
    y: bigint;
    curveId: CurveId;
}
interface G2Point$1 {
    x: [bigint, bigint];
    y: [bigint, bigint];
    curveId: CurveId;
}

interface Groth16Proof {
    a: G1Point$1;
    b: G2Point$1;
    c: G1Point$1;
    publicInputs: bigint[];
    curveId?: CurveId;
    imageId?: Uint8Array;
    journal?: Uint8Array;
}
interface Groth16VerifyingKey {
    alpha: G1Point$1;
    beta: G2Point$1;
    gamma: G2Point$1;
    delta: G2Point$1;
    ic: G1Point$1[];
}

type G1Point = [bigint, bigint];
type G2Point = [[bigint, bigint], [bigint, bigint]];
type G1G2Pair = [G1Point, G2Point];
type MsmCalldataBuilderOptons = Partial<{
    includeDigitsDecomposition: boolean;
    includePointsAndScalars: boolean;
    serializeAsPureFelt252Array: boolean;
    risc0Mode: boolean;
}>;
declare function msmCalldataBuilder(points: G1Point[], scalars: bigint[], curveId: CurveId, options?: MsmCalldataBuilderOptons): bigint[];
declare function mpcCalldataBuilder(curveId: CurveId, pairs: G1G2Pair[], nFixedG2: number, publicPair?: G1G2Pair): bigint[];
declare function toWeirstrass(x_twisted: bigint, y_twisted: bigint): [bigint, bigint];
declare function toTwistedEdwards(x_weierstrass: bigint, y_weierstrass: bigint): [bigint, bigint];
declare function getGroth16CallData(proof: Groth16Proof, verifyingKey: Groth16VerifyingKey, curveId: CurveId): any[];

/* tslint:disable */
/* eslint-disable */
/**
 * @param {any[]} values
 * @param {any[]} scalars
 * @param {number} curve_id
 * @param {boolean} include_digits_decomposition
 * @param {boolean} include_points_and_scalars
 * @param {boolean} serialize_as_pure_felt252_array
 * @param {boolean} risc0_mode
 * @returns {any[]}
 */
declare function msm_calldata_builder(values: any[], scalars: any[], curve_id: number, include_digits_decomposition: boolean, include_points_and_scalars: boolean, serialize_as_pure_felt252_array: boolean, risc0_mode: boolean): any[];
/**
 * @param {number} curve_id
 * @param {any[]} values1
 * @param {number} n_fixed_g2
 * @param {any[]} values2
 * @returns {any[]}
 */
declare function mpc_calldata_builder(curve_id: number, values1: any[], n_fixed_g2: number, values2: any[]): any[];
/**
 * @param {any} x_twisted
 * @param {any} y_twisted
 * @returns {any[]}
 */
declare function to_weirstrass(x_twisted: any, y_twisted: any): any[];
/**
 * @param {any} x_weirstrass
 * @param {any} y_weirstrass
 * @returns {any[]}
 */
declare function to_twistededwards(x_weirstrass: any, y_weirstrass: any): any[];
/**
 * @param {any} proof_js
 * @param {any} vk_js
 * @param {any} curve_id_js
 * @returns {any[]}
 */
declare function get_groth16_calldata(proof_js: any, vk_js: any, curve_id_js: any): any[];

type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly msm_calldata_builder: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly mpc_calldata_builder: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly to_weirstrass: (a: number, b: number, c: number) => void;
  readonly to_twistededwards: (a: number, b: number, c: number) => void;
  readonly get_groth16_calldata: (a: number, b: number, c: number, d: number) => void;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
}

type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {{ module: SyncInitInput }} module - Passing `SyncInitInput` directly is deprecated.
*
* @returns {InitOutput}
*/
declare function initSync(module: { module: SyncInitInput } | SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {{ module_or_path: InitInput | Promise<InitInput> }} module_or_path - Passing `InitInput` directly is deprecated.
*
* @returns {Promise<InitOutput>}
*/
declare function __wbg_init (module_or_path?: { module_or_path: InitInput | Promise<InitInput> } | InitInput | Promise<InitInput>): Promise<InitOutput>;

declare function init(): ReturnType<typeof __wbg_init>;

export { CurveId, type G1G2Pair, type G1Point, type G2Point, type InitInput, type InitOutput, type MsmCalldataBuilderOptons, type SyncInitInput, getGroth16CallData, get_groth16_calldata, init, initSync, mpcCalldataBuilder, mpc_calldata_builder, msmCalldataBuilder, msm_calldata_builder, toTwistedEdwards, toWeirstrass, to_twistededwards, to_weirstrass };
